{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://siv3d-playground/./src/initialFiles.ts","webpack://siv3d-playground/external commonjs \"vscode\"","webpack://siv3d-playground/webpack/bootstrap","webpack://siv3d-playground/./src/extension.ts"],"sourcesContent":["import {\n\tFileSystemProvider,\n\tUri,\n\tworkspace,\n} from 'vscode';\n\nasync function readFileFromTemplate(fs: FileSystemProvider, workspaceRoot: Uri, extensionBase: Uri, sourcePath: string, targetPath?: string): Promise<void> {\n    const fileContent = await workspace.fs.readFile(Uri.joinPath(extensionBase, \"template\", sourcePath));\n    const targetFilePath = targetPath || sourcePath;\n    fs.writeFile(Uri.joinPath(workspaceRoot, targetFilePath), fileContent, { create: true, overwrite: false });\n}\n\nasync function fetchFile(fs: FileSystemProvider, workspaceRoot: Uri, fetchBase: string, sourcePath: string, targetPath?: string): Promise<void> {\n    const fileResponse = await fetch(Uri.joinPath(Uri.parse(fetchBase), sourcePath).toString());\n    const fileContent = await fileResponse.arrayBuffer();\n    const targetFilePath = targetPath || sourcePath;\n    fs.writeFile(Uri.joinPath(workspaceRoot, targetFilePath), new Uint8Array(fileContent), { create: true, overwrite: false });\n}\n\nexport async function loadInitialAssets(fs: FileSystemProvider, workspaceRoot: Uri, extensionBase: Uri) {\n    const promises: Promise<void>[] = [];\n\n    // fs.createDirectory(workspaceRoot);\n    promises.push(readFileFromTemplate(fs, workspaceRoot, extensionBase, \"main.html\"));\n    promises.push(readFileFromTemplate(fs, workspaceRoot, extensionBase, \"README.md\"));\n        \n    fs.createDirectory(Uri.joinPath(workspaceRoot, \".vscode\"));\n    promises.push(readFileFromTemplate(fs, workspaceRoot, extensionBase, \".vscode/tasks.json\"));\n    \n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"src\"));\n    promises.push(readFileFromTemplate(fs, workspaceRoot, extensionBase, \"src/Main.cpp\"));\n\n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"include\"));\n\n    await Promise.all(promises);\n}\n\nexport async function loadAdditionalAssets(fs: FileSystemProvider, workspaceRoot: Uri) {\n    const promises: Promise<void>[] = [];\n\n    const downloadUrl = workspace.getConfiguration(\"siv3d-playground\").get<string>(\"siv3d-assets-download-url\");\n\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"lib/Siv3D.wasm\", \"Siv3D.wasm\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"lib/Siv3D.js\", \"Siv3D.js\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"lib/Siv3D.data\", \"Siv3D.data\"));\n\n    await Promise.all(promises);\n\n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"example\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/windmill.png\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/example/particle.png\"));\n\n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/geojson\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/geojson/countries.geojson\"));\n\n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/texture\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/texture/uv.png\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/texture/grass.jpg\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/texture/rock.jpg\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/texture/ground.jpg\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/texture/earth.jpg\"));\n\n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/shader\"));\n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/shader/essl\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/shader/essl/terrain_forward.vert\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/shader/essl/terrain_forward.frag\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/shader/essl/terrain_normal.frag\"));\n\n    fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/obj\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/obj/blacksmith.obj\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/obj/mill.obj\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/obj/tree.obj\"));\n    promises.push(fetchFile(fs, workspaceRoot, downloadUrl, \"example/obj/pine.obj\"));\n        \n    await Promise.all(promises);\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//\n// ############################################################################\n//\n//\t\t\t\t\t\t! USED FOR RUNNING VSCODE OUT OF SOURCES FOR WEB !\n//\t\t\t\t\t\t\t\t\t\t! DO NOT REMOVE !\n//\n// ############################################################################\n//\n\nimport * as vscode from 'vscode';\nimport { loadAdditionalAssets, loadInitialAssets } from './initialFiles';\nimport { ExtensionContext } from '../../wasm-playground/src/extension';\n\ndeclare const navigator: unknown;\n\nexport async function activate(context: vscode.ExtensionContext) {\n\tif (typeof navigator === 'object') {\t// do not run under node.js\n\t\tlet compilePromiseResolver: ((resultCode: number) => void) | null;\n\n\t\tcontext.subscriptions.push(\n\t\t\tvscode.commands.registerCommand(\"siv3d-playground.compile.run\", async () => {\n\t\t\t\tconst compilePromise = new Promise<number>((resolve, _) => {\n\t\t\t\t\tcompilePromiseResolver = resolve;\n\t\t\t\t});\n\t\t\t\tvscode.commands.executeCommand(\"workbench.action.tasks.runTask\", \"emcc build\");\n\n\t\t\t\tif ((await compilePromise) === 0) {\n\t\t\t\t\tconst workspaceRoot = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))\n\t\t\t\t\t\t? vscode.workspace.workspaceFolders[0].uri : undefined;\n\t\t\t\t\tvscode.commands.executeCommand(\"emcc.preview.show\", vscode.Uri.joinPath(workspaceRoot, \"main.html\"), \"Siv3D Preview\");\n\t\t\t\t}\n\t\t\t\tcompilePromiseResolver = null;\n\t\t\t})\n\t\t);\n\n\t\tvscode.tasks.onDidEndTaskProcess(e => {\n\t\t\tif (e.execution.task.name == \"emcc build\") {\n\t\t\t\tcompilePromiseResolver && compilePromiseResolver(e.exitCode);\n\t\t\t}\n\t\t});\n\n\t\tconst playgroundExtension = vscode.extensions.getExtension<ExtensionContext>(\"kamenokosoft.wasm-playground\");\n\n\t\tlet extensionContext;\n\n\t\tif (playgroundExtension.isActive) {\n\t\t\textensionContext = playgroundExtension.exports;\n\t\t} else {\n\t\t\textensionContext = await playgroundExtension.activate();\n\t\t}\n\n\t\tconst memFs = extensionContext.memFs;\n\n\t\t// const workSpaceUri = vscode.Uri.parse(\"memfs:/siv3d-playground\");\n\t\t// seedWorkspace(context, memFs, workSpaceUri);\n\n\t\tconst workspaceRoot = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))\n\t\t\t? vscode.workspace.workspaceFolders[0] : undefined;\n\n\t\tif (workspaceRoot) {\n\t\t\tseedWorkspace(context, memFs, workspaceRoot.uri);\n\t\t}\n\n\t\tvscode.workspace.onDidChangeWorkspaceFolders(e => {\n\t\t\tfor (const workspace of e.added) {\n\t\t\t\tseedWorkspace(context, memFs, workspace.uri);\n\t\t\t}\n\t\t});\n\t}\n}\n\nasync function seedWorkspace(context: vscode.ExtensionContext, memFs: vscode.FileSystemProvider, workspaceUri: vscode.Uri) {\n\tconst openOptions: vscode.TextDocumentShowOptions = {\n\t\tpreview: false\n\t};\n\n\tconst folders = workspaceUri.path.split(\"/\").slice(1);\n\n\ttry {\n\t\tawait memFs.stat(workspaceUri);\n\t} catch (e) {\n\t\tif (e instanceof vscode.FileSystemError) {\n\t\t\tfor (let i = 1; i <= folders.length; i++) {\n\t\t\t\tconst newDirectory = workspaceUri.with({ path: \"/\" + folders.slice(0, i).join(\"/\") });\n\t\t\t\tawait memFs.createDirectory(newDirectory);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tif (folders.length > 0 && folders[0] === \"gist\") {\n\t\tconst gistFsPath = vscode.Uri.parse(`gist://${folders.slice(1).join(\"/\")}/`);\n\t\tconst gistExtension = vscode.extensions.getExtension<void>(\"vsls-contrib.gistfs\");\n\n\t\tif (!gistExtension.isActive) {\n\t\t\tawait gistExtension.activate();\n\t\t}\n\n\t\tawait vscode.workspace.fs.copy(gistFsPath, workspaceUri, { overwrite: true });\n\t} else {\n\t\tawait loadInitialAssets(memFs, workspaceUri, context.extensionUri);\n\t\tvscode.commands.executeCommand('vscode.open', vscode.Uri.joinPath(workspaceUri, \"src/Main.cpp\"), openOptions);\n\t\t// vscode.commands.executeCommand(\"emcc.preview.show\", vscode.Uri.joinPath(workspaceUri, \"main.html\"), \"Siv3D Preview\");\n\t}\n\tawait loadAdditionalAssets(memFs, workspaceUri);\n}\n"],"names":["async","readFileFromTemplate","fs","workspaceRoot","extensionBase","sourcePath","targetPath","fileContent","workspace","readFile","Uri","joinPath","targetFilePath","writeFile","create","overwrite","fetchFile","fetchBase","fileResponse","fetch","parse","toString","arrayBuffer","Uint8Array","promises","push","createDirectory","Promise","all","downloadUrl","getConfiguration","get","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","seedWorkspace","context","memFs","workspaceUri","folders","path","split","slice","stat","e","vscode","FileSystemError","i","length","newDirectory","with","join","gistFsPath","gistExtension","extensions","getExtension","isActive","activate","copy","loadInitialAssets","extensionUri","commands","executeCommand","preview","loadAdditionalAssets","navigator","compilePromiseResolver","subscriptions","registerCommand","compilePromise","resolve","_","workspaceFolders","uri","tasks","onDidEndTaskProcess","execution","task","name","exitCode","playgroundExtension","extensionContext","onDidChangeWorkspaceFolders","added"],"sourceRoot":""}